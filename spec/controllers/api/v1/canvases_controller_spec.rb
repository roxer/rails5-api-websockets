require 'rails_helper'
require 'api/v1/canvases_controller'


# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe Api::V1::CanvasesController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # Api::V1::Canvas. As you add validations to Api::V1::Canvas, be sure to
  # adjust the attributes here as well.
  let(:diagram) { Api::V1::Diagram.create(name: 'default') }
  let(:valid_attributes) {
    # skip("Add a hash of attributes valid for your model")
    { name: 'canvas 1', diagram: diagram }
  }

  let(:invalid_attributes) {
    # skip("Add a hash of attributes invalid for your model")
    { name: '', diagram: diagram }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # Api::V1::CanvasesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all api_v1_canvases as @api_v1_canvases" do
      canvas = Api::V1::Canvas.create! valid_attributes
      get :index, params: {}, session: valid_session, format: :json
      expect(assigns(:api_v1_canvases)).to eq([canvas])
    end
  end

  describe "GET show" do
    it "assigns the requested api_v1 as @api_v1" do
      canvas = Api::V1::Canvas.create! valid_attributes
      get :show, params: { :id => canvas.to_param }, session: valid_session, format: :json
      expect(assigns(:api_v1_canvas)).to eq(canvas)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Api::V1::Canvas" do
        expect {
          post :create, params: valid_attributes, session: valid_session, format: :json
        }.to change(Api::V1::Canvas, :count).by(1)
      end

      it "assigns a newly created api_v1_canvas as @api_v1_canvas" do
        post :create, params: valid_attributes, session: valid_session, format: :json
        expect(assigns(:api_v1_canvas)).to be_a(Api::V1::Canvas)
        # expect(assigns(:api_v1_canvas)).to be_persisted
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved api_v1_canvas as @api_v1_canvas" do
        post :create, params: invalid_attributes, session: valid_session, format: :json
        expect(assigns(:api_v1_canvas)).to be_a_new(Api::V1::Canvas)
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      # it "updates the requested api_v1_canvas" do
      #   canvas = Api::V1::Canvas.create! valid_attributes
      #   put :update, {:id => canvas.to_param, :api_v1_canvas => new_attributes}, valid_session
      #   canvas.reload
      #   skip("Add assertions for updated state")
      # end

      it "assigns the requested api_v1_canvas as @api_v1_canvas" do
        canvas = Api::V1::Canvas.create! valid_attributes
        put :update, params: { id: canvas.id }.merge(valid_attributes),
                     session: valid_session, format: :json

        expect(assigns(:api_v1_canvas)).to eq(canvas)
      end

      it "redirects to the api_v1_canvas" do
        canvas = Api::V1::Canvas.create! valid_attributes
        put :update, params: { id: canvas.id }.merge(valid_attributes),
                     session: valid_session, format: :json

        expect(response).to have_http_status(:ok)
      end
    end

    describe "with invalid params" do
      it "assigns the api_v1 as @api_v1" do
        canvas = Api::V1::Canvas.create! valid_attributes
        put :update, params: { id: canvas.id }.merge(invalid_attributes),
                     session: valid_session, format: :json

        expect(assigns(:api_v1_canvas)).to eq(canvas)
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested api_v1_canvas" do
      canvas = Api::V1::Canvas.create! valid_attributes
      expect {
        delete :destroy, params: { id: canvas.id },
                         session: valid_session, format: :json

      }.to change(Api::V1::Canvas, :count).by(-1)
    end

    it "response after api_v1_canvas delete" do
      canvas = Api::V1::Canvas.create! valid_attributes
      delete :destroy, params: { id: canvas.id },
                       session: valid_session, format: :json

      expect(response).to have_http_status(:no_content)
    end
  end

end
